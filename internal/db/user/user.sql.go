// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: user.sql

package user

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const activateUser = `-- name: ActivateUser :exec
UPDATE "user"
SET is_active = TRUE,
    updated_at = NOW()
WHERE id = $1
`

func (q *Queries) ActivateUser(ctx context.Context, id pgtype.UUID) error {
	_, err := q.db.Exec(ctx, activateUser, id)
	return err
}

const deactivateUser = `-- name: DeactivateUser :exec
UPDATE "user"
SET is_active = FALSE,
    updated_at = NOW()
WHERE id = $1
`

func (q *Queries) DeactivateUser(ctx context.Context, id pgtype.UUID) error {
	_, err := q.db.Exec(ctx, deactivateUser, id)
	return err
}

const getUserByEmail = `-- name: GetUserByEmail :one
SELECT id, full_name, bio, email, password_hash, is_active, created_at, updated_at FROM "user"
WHERE email = $1
`

func (q *Queries) GetUserByEmail(ctx context.Context, email pgtype.Text) (User, error) {
	row := q.db.QueryRow(ctx, getUserByEmail, email)
	var i User
	err := row.Scan(
		&i.ID,
		&i.FullName,
		&i.Bio,
		&i.Email,
		&i.PasswordHash,
		&i.IsActive,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const searchUsersByName = `-- name: SearchUsersByName :many
SELECT id, full_name, bio, email, password_hash, is_active, created_at, updated_at FROM "user"
WHERE full_name ILIKE '%' || $1 || '%'
ORDER BY full_name
`

func (q *Queries) SearchUsersByName(ctx context.Context, dollar_1 pgtype.Text) ([]User, error) {
	rows, err := q.db.Query(ctx, searchUsersByName, dollar_1)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []User
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.ID,
			&i.FullName,
			&i.Bio,
			&i.Email,
			&i.PasswordHash,
			&i.IsActive,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateUser = `-- name: UpdateUser :exec
UPDATE "user"
SET full_name = $2,
    bio = $3,
    email = $4,
    updated_at = NOW()
WHERE id = $1
`

type UpdateUserParams struct {
	ID       pgtype.UUID
	FullName string
	Bio      pgtype.Text
	Email    pgtype.Text
}

func (q *Queries) UpdateUser(ctx context.Context, arg UpdateUserParams) error {
	_, err := q.db.Exec(ctx, updateUser,
		arg.ID,
		arg.FullName,
		arg.Bio,
		arg.Email,
	)
	return err
}

const updateUserPassword = `-- name: UpdateUserPassword :exec
UPDATE "user"
SET password_hash = $2,
    updated_at = NOW()
WHERE id = $1
`

type UpdateUserPasswordParams struct {
	ID           pgtype.UUID
	PasswordHash pgtype.Text
}

func (q *Queries) UpdateUserPassword(ctx context.Context, arg UpdateUserPasswordParams) error {
	_, err := q.db.Exec(ctx, updateUserPassword, arg.ID, arg.PasswordHash)
	return err
}
