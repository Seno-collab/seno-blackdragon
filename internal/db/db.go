package db

import (
	"context"
	"database/sql"
)

// User represents a row from the `users` table.
type User struct {
	ID   int64
	Name string
}

// Queries is a thin wrapper around *sql.DB. In real setups this file would be
// generated by sqlc based on the SQL queries in db/query.
type Queries struct {
	db *sql.DB
}

// New returns a new Queries instance.
func New(db *sql.DB) *Queries { return &Queries{db: db} }

// CreateUser inserts a new user. This is a placeholder for the generated code.
func (q *Queries) CreateUser(ctx context.Context, name string) (User, error) {
	// TODO: implement using prepared statements generated by sqlc
	return User{}, nil
}

// GetUserByID fetches a user by ID. This is a placeholder for the generated code.
func (q *Queries) GetUserByID(ctx context.Context, id int64) (User, error) {
	// TODO: implement using prepared statements generated by sqlc
	return User{}, nil
}
